}
par(mfrow=c(1,2))
# Plot Marginal Posterior Distributions
hist(accepted_theta0, breaks = 20, col = "orange", main = "Posterior of θ₀", xlab = "θ₀")
hist(accepted_theta1, breaks = 20, col = "grey", main = "Posterior of θ₁", xlab = "θ₁")
# Plot Joint Posterior Distribution
plot(
accepted_theta0, accepted_theta1,
main = "Joint Posterior Distribution",
xlab = "θ₀", ylab = "θ₁",
col = "darkblue", pch = 19
)
# Model 5 Parameters
theta0 <- 251.671653135 # selected parameter
theta1 <- 0.227168908   # selected parameter
theta2 <- -0.036521863  # fixed
theta3 <- -0.003650664  # fixed
# Simulation settings
epsilon <- RSS_Model_5 * 2
num_sim <- 10000
# Storage for accepted samples
accepted_theta0 <- c()
accepted_theta1 <- c()
# Rejection ABC
for (i in 1:num_sim) {
sample_theta0 <- runif(1, theta0 * 0.8, theta0 * 1.2)
sample_theta1 <- runif(1, theta1 * 0.8, theta1 * 1.2)
theta_vector <- matrix(c(sample_theta0, sample_theta1, theta2, theta3))
y_hat <- X_model5 %*% theta_vector
rss_sim <- sum((Y - y_hat)^2)
if (rss_sim < epsilon) {  # accept if close to observed
accepted_theta0 <- c(accepted_theta0, sample_theta0)
accepted_theta1 <- c(accepted_theta1, sample_theta1)
}
}
par(mfrow=c(1,2))
# Plot Marginal Posterior Distributions
hist(accepted_theta0, breaks = 20, col = "orange", main = "Posterior of θ₀", xlab = "θ₀")
hist(accepted_theta1, breaks = 20, col = "lightblue", main = "Posterior of θ₁", xlab = "θ₁")
# Plot Joint Posterior Distribution
plot(
accepted_theta0, accepted_theta1,
main = "Joint Posterior Distribution",
xlab = "θ₀", ylab = "θ₁",
col = "darkblue", pch = 19
)
# Add an index column for time series plotting if not present
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
}
# Enhanced function to create condensed time series plots
plot_condensed_time_series <- function(data, n_groups = 3) {
# Calculate group sizes
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Get all numeric columns except Index for plotting
variables_to_plot <- setdiff(names(data)[sapply(data, is.numeric)], "Index")
# APPROACH 1: Combined plot with all variables
# -----------------------------------------
# Create a data frame in long format for faceted plotting
plot_data <- tidyr::pivot_longer(
data,
cols = all_of(variables_to_plot),
names_to = "Variable",
values_to = "Value"
)
# Scale the variables to be comparable on the same plot
plot_data <- plot_data %>%
group_by(Variable) %>%
mutate(
Scaled_Value = (Value - min(Value, na.rm = TRUE)) /
(max(Value, na.rm = TRUE) - min(Value, na.rm = TRUE))
)
# Create the combined plot
p_combined <- ggplot(plot_data, aes(x = Index, y = Scaled_Value, color = Variable)) +
geom_line(linewidth = 0.8, alpha = 0.8) +
labs(title = "Combined Time Series for All Variables (Scaled)",
subtitle = "Values scaled to 0-1 range for comparability",
x = "Index (Time Proxy)",
y = "Scaled Value") +
scale_color_brewer(palette = "Set1") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
print(p_combined)
library(matlib)
library(ggplot2)
library(rsample)
set.seed(123)
df <- read.csv(file="~/assignment/stat/dataset.csv", header = TRUE)
any(is.na(df))
head(df)
X <- as.matrix(df[, c("x1", "x3", "x4", "x5")])
Y <- as.matrix(df[,"x2"])
time <- seq(1, by = 1, length.out = nrow(df))
head(X)
head(Y)
X.ts<-ts(X,start = c(min(time),max(time)),frequency =1)
Y.ts<-ts(Y,start = c(min(time),max(time)),frequency =1)
# Add an index column for time series plotting if not present
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
}
# Enhanced function to create condensed time series plots
plot_condensed_time_series <- function(data, n_groups = 3) {
# Calculate group sizes
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Get all numeric columns except Index for plotting
variables_to_plot <- setdiff(names(data)[sapply(data, is.numeric)], "Index")
# APPROACH 1: Combined plot with all variables
# -----------------------------------------
# Create a data frame in long format for faceted plotting
plot_data <- tidyr::pivot_longer(
data,
cols = all_of(variables_to_plot),
names_to = "Variable",
values_to = "Value"
)
# Scale the variables to be comparable on the same plot
plot_data <- plot_data %>%
group_by(Variable) %>%
mutate(
Scaled_Value = (Value - min(Value, na.rm = TRUE)) /
(max(Value, na.rm = TRUE) - min(Value, na.rm = TRUE))
)
# Create the combined plot
p_combined <- ggplot(plot_data, aes(x = Index, y = Scaled_Value, color = Variable)) +
geom_line(linewidth = 0.8, alpha = 0.8) +
labs(title = "Combined Time Series for All Variables (Scaled)",
subtitle = "Values scaled to 0-1 range for comparability",
x = "Index (Time Proxy)",
y = "Scaled Value") +
scale_color_brewer(palette = "Set1") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
print(p_combined)
plot_data$Group <- cut(
plot_data$Index,
breaks = seq(1, total_rows + group_size, by = group_size),
labels = paste("Group", 1:n_groups),
include.lowest = TRUE
)
# Add an index column for time series plotting if not present
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
}
# Enhanced function to create condensed time series plots
plot_condensed_time_series <- function(data, n_groups = 3) {
# Calculate group sizes
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Get all numeric columns except Index for plotting
variables_to_plot <- setdiff(names(data)[sapply(data, is.numeric)], "Index")
# APPROACH 1: Combined plot with all variables
# -----------------------------------------
# Create a data frame in long format for faceted plotting
plot_data <- tidyr::pivot_longer(
data,
cols = all_of(variables_to_plot),
names_to = "Variable",
values_to = "Value"
)
# Scale the variables to be comparable on the same plot
plot_data <- plot_data %>%
group_by(Variable) %>%
mutate(
Scaled_Value = (Value - min(Value, na.rm = TRUE)) /
(max(Value, na.rm = TRUE) - min(Value, na.rm = TRUE))
)
# Create the combined plot
p_combined <- ggplot(plot_data, aes(x = Index, y = Scaled_Value, color = Variable)) +
geom_line(linewidth = 0.8, alpha = 0.8) +
labs(title = "Combined Time Series for All Variables (Scaled)",
subtitle = "Values scaled to 0-1 range for comparability",
x = "Index (Time Proxy)",
y = "Scaled Value") +
scale_color_brewer(palette = "Set1") +
theme_light() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "right",
legend.title = element_text(face = "bold"),
panel.grid.minor = element_blank()
)
print(p_combined)
# Add an index column for time series plotting if not present
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
}
# Simplified function to create condensed time series plots without tidyverse dependencies
plot_condensed_time_series <- function(data, n_groups = 3) {
# Load required libraries
library(ggplot2)
# Calculate group sizes
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Get all numeric columns except Index for plotting
variables_to_plot <- setdiff(names(data)[sapply(data, is.numeric)], "Index")
# APPROACH 1: Multi-variable plot with single panel
# -------------------------------------------------
# Create a plot for all variables
# First create an empty plot
p1 <- ggplot() + theme_light()
# Add each variable as a separate line with different colors
colors <- rainbow(length(variables_to_plot))
for (i in seq_along(variables_to_plot)) {
var_name <- variables_to_plot[i]
# Scale the values to 0-1 range
var_values <- data[[var_name]]
min_val <- min(var_values, na.rm = TRUE)
max_val <- max(var_values, na.rm = TRUE)
# Avoid division by zero if all values are the same
if (max_val == min_val) {
scaled_values <- rep(0.5, length(var_values))
} else {
scaled_values <- (var_values - min_val) / (max_val - min_val)
}
# Create a temporary data frame for this variable
temp_df <- data.frame(
Index = data$Index,
Value = scaled_values,
Variable = var_name
)
# Add to plot
p1 <- p1 +
geom_line(
data = temp_df,
aes(x = Index, y = Value, group = Variable),
color = colors[i],
size = 1,
alpha = 0.7
)
}
# Finalize the plot
p1 <- p1 +
labs(
title = "Scaled Time Series for All Variables",
subtitle = "Values scaled to 0-1 range for comparability",
x = "Index (Time Proxy)",
y = "Scaled Value (0-1)"
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10)
)
# Add a legend manually
for (i in seq_along(variables_to_plot)) {
p1 <- p1 +
annotate(
"text",
x = max(data$Index) * 0.05,
y = 0.95 - (i-1) * 0.05,
label = variables_to_plot[i],
color = colors[i],
hjust = 0,
fontface = "bold"
)
}
print(p1)
# Add an index column for time series plotting if not present
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
}
# Simplified function to create condensed time series plots without tidyverse dependencies
plot_condensed_time_series <- function(data, n_groups = 3) {
# Calculate group sizes
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Get all numeric columns except Index for plotting
variables_to_plot <- setdiff(names(data)[sapply(data, is.numeric)], "Index")
# APPROACH 1: Multi-variable plot with single panel
# -------------------------------------------------
# Create a plot for all variables
# First create an empty plot
p1 <- ggplot() + theme_light()
# Add each variable as a separate line with different colors
colors <- rainbow(length(variables_to_plot))
for (i in seq_along(variables_to_plot)) {
var_name <- variables_to_plot[i]
# Scale the values to 0-1 range
var_values <- data[[var_name]]
min_val <- min(var_values, na.rm = TRUE)
max_val <- max(var_values, na.rm = TRUE)
# Avoid division by zero if all values are the same
if (max_val == min_val) {
scaled_values <- rep(0.5, length(var_values))
} else {
scaled_values <- (var_values - min_val) / (max_val - min_val)
}
# Create a temporary data frame for this variable
temp_df <- data.frame(
Index = data$Index,
Value = scaled_values,
Variable = var_name
)
# Add to plot
p1 <- p1 +
geom_line(
data = temp_df,
aes(x = Index, y = Value, group = Variable),
color = colors[i],
size = 1,
alpha = 0.7
)
}
# Finalize the plot
p1 <- p1 +
labs(
title = "Scaled Time Series for All Variables",
subtitle = "Values scaled to 0-1 range for comparability",
x = "Index (Time Proxy)",
y = "Scaled Value (0-1)"
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10)
)
# Add a legend manually
for (i in seq_along(variables_to_plot)) {
p1 <- p1 +
annotate(
"text",
x = max(data$Index) * 0.05,
y = 0.95 - (i-1) * 0.05,
label = variables_to_plot[i],
color = colors[i],
hjust = 0,
fontface = "bold"
)
}
print(p1)
# Add an index column for time series plotting if not present
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
}
# Simplified function to create condensed time series plots without tidyverse dependencies
plot_condensed_time_series <- function(data, n_groups = 3) {
# Load required libraries
library(ggplot2)
# Calculate group sizes
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Get all numeric columns except Index for plotting
variables_to_plot <- setdiff(names(data)[sapply(data, is.numeric)], "Index")
# APPROACH 1: Multi-variable plot with single panel
# -------------------------------------------------
# Create a plot for all variables
# First create an empty plot
p1 <- ggplot() + theme_light()
# Add each variable as a separate line with different colors
colors <- rainbow(length(variables_to_plot))
for (i in seq_along(variables_to_plot)) {
var_name <- variables_to_plot[i]
# Scale the values to 0-1 range
var_values <- data[[var_name]]
min_val <- min(var_values, na.rm = TRUE)
max_val <- max(var_values, na.rm = TRUE)
# Avoid division by zero if all values are the same
if (max_val == min_val) {
scaled_values <- rep(0.5, length(var_values))
} else {
scaled_values <- (var_values - min_val) / (max_val - min_val)
}
# Create a temporary data frame for this variable
temp_df <- data.frame(
Index = data$Index,
Value = scaled_values,
Variable = var_name
)
# Add to plot
p1 <- p1 +
geom_line(
data = temp_df,
aes(x = Index, y = Value, group = Variable),
color = colors[i],
size = 1,
alpha = 0.7
)
}
# Finalize the plot
p1 <- p1 +
labs(
title = "Scaled Time Series for All Variables",
subtitle = "Values scaled to 0-1 range for comparability",
x = "Index (Time Proxy)",
y = "Scaled Value (0-1)"
) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, size = 10)
)
# Add a legend manually
for (i in seq_along(variables_to_plot)) {
p1 <- p1 +
annotate(
"text",
x = max(data$Index) * 0.05,
y = 0.95 - (i-1) * 0.05,
label = variables_to_plot[i],
color = colors[i],
hjust = 0,
fontface = "bold"
)
}
print(p1)
library(matlib)
library(ggplot2)
library(rsample)
library(dplyr)
#install.packages("matlib")
#install.packages("rsample")
install.packages("dplyr")
library(matlib)
library(ggplot2)
library(rsample)
library(dplyr)
if (!exists("df")) {
set.seed(123)
n_rows <- 100
df <- data.frame(
Index = 1:n_rows,
ValueA = cumsum(rnorm(n_rows, 0, 1)),
ValueB = cumsum(rnorm(n_rows, 5, 2)) + sin((1:n_rows)/10)*10,
NonNumeric = sample(letters, n_rows, replace = TRUE) # To test numeric column selection
)
print("Sample df created.")
} else {
# Add Index if it's not already there from the original code
if (!"Index" %in% names(df)) {
df$Index <- 1:nrow(df)
print("Index column added to existing df.")
}
}
# --- Function to add Group ID ---
add_group_column <- function(data, n_groups = 3) {
total_rows <- nrow(data)
group_size <- ceiling(total_rows / n_groups)
# Create a group identifier
# Simpler way using rep and cut (or gl for more robust factor creation)
# data$Group <- cut(1:total_rows, breaks = n_groups, labels = FALSE) # This creates equal sized groups based on index
# Or, to match the original logic for start/end indices:
group_indices <- integer(total_rows)
for (i in 1:n_groups) {
start_idx <- (i - 1) * group_size + 1
end_idx <- min(i * group_size, total_rows)
if (start_idx <= end_idx) { # Ensure start_idx is not past total_rows
group_indices[start_idx:end_idx] <- i
}
}
data$Group <- factor(group_indices)
# Filter out rows that might not have been assigned a group if total_rows is very small
# or if n_groups is large leading to empty potential groups.
# However, with ceiling(total_rows / n_groups), every row should be covered.
# data <- data[data$Group != 0, ] # In case any group_indices remained 0
return(data)
}
plot_time_series_faceted_groups <- function(data, n_groups = 3) {
data_with_groups <- add_group_column(data, n_groups)
total_rows <- nrow(data_with_groups) # Use data_with_groups for row count
variables_to_plot <- setdiff(names(data_with_groups)[sapply(data_with_groups, is.numeric)],
c("Index")) # Exclude Index, Group is factor
for (var_name in variables_to_plot) {
# 1. Full time series plot
p_full <- ggplot(data_with_groups, aes(x = Index, y = .data[[var_name]])) +
geom_line(color = "steelblue", alpha = 0.8) +
labs(title = paste("Full Time Series of", var_name),
subtitle = "Note: Index is data order, not true time",
x = "Index (Time Proxy)",
y = var_name) +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size=14),
plot.subtitle = element_text(hjust = 0.5, size=10),
axis.title = element_text(size=12))
print(p_full)
# 2. Faceted plot for groups
# Determine group start/end indices for titles (optional but nice)
group_ranges <- data_with_groups %>%
group_by(Group) %>%
summarise(start_idx = min(Index), end_idx = max(Index), .groups = 'drop') %>%
mutate(facet_title = paste0("Group ", Group, " (Idx: ", start_idx, "-", end_idx, ")"))
# Create a mapping for facet labels
facet_labeller <- setNames(group_ranges$facet_title, group_ranges$Group)
p_faceted <- ggplot(data_with_groups, aes(x = Index, y = .data[[var_name]])) +
geom_line(color = "darkorange", alpha = 0.9) +
geom_point(color = "darkorange", size = 1, alpha = 0.7) +
facet_wrap(~Group, scales = "free_x", ncol = 1, # Use free_x so each facet has its own x-axis range
labeller = labeller(Group = facet_labeller)) +
labs(title = paste("Grouped Time Series of", var_name),
x = "Index (Time Proxy)",
y = var_name) +
theme_light() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size=14),
strip.text = element_text(face="bold", size=10), # Facet titles
axis.title = element_text(size=12))
print(p_faceted)
}
}
# Example Usage for Strategy 1:
plot_time_series_faceted_groups(df, n_groups = 3)
